"""create default admin user

Revision ID: 6000c49a40ec
Revises: c4b5a3bb3c80
Create Date: 2023-11-23 20:51:40.035425

"""
from alembic import op
import sqlalchemy as sa
from bcrypt import hashpw, gensalt

# revision identifiers, used by Alembic.
revision = '6000c49a40ec'
down_revision = 'c4b5a3bb3c80'
branch_labels = None
depends_on = '2f14b2c6ae9a'

username = 'admin'
password = 'admin'
role_name = 'admin'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    # Hash the password
    hashed_password = hashpw(password.encode('utf-8'), gensalt()).decode('utf-8')

    # Insert record into the user table
    result = connection.execute(
        sa.Table('user', sa.MetaData(), autoload_with=connection).insert().values(
            username=username,
            password_hash=hashed_password,
            is_disabled=False
        )
    )

    # Get the user_id for the admin
    user_id = result.inserted_primary_key[0]

    # Get the role_name_id for admin
    role_id = connection.execute(
        sa.select(sa.column('id'))
        .where(sa.text(f"name = '{role_name}'"))
        .select_from(sa.Table('role', sa.MetaData(), autoload_with=connection))
    ).scalar()


    # Create admin role
    connection.execute(sa.Table('user_role', sa.MetaData(), autoload_with=connection).insert().values(user_id=user_id, role_id=role_id))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    # Get the user_id for admin
    user_id = connection.execute(
        sa.select(sa.column('id'))
        .where(sa.text(f"username = '{username}'"))
        .select_from(sa.Table('user', sa.MetaData(), autoload_with=connection))
    ).scalar()

    # Delete the admin role
    connection.execute(sa.Table('user_role', sa.MetaData(), autoload_with=connection)
                       .delete()
                       .where(sa.text(f"user_id = '{user_id}'")))

    # Delete the admin user
    connection.execute(sa.Table('user', sa.MetaData(), autoload_with=connection)
                       .delete()
                       .where(sa.text(f"id = '{user_id}'")))
    # ### end Alembic commands ###
